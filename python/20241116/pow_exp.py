import gmpy2
from Crypto.Util.number import long_to_bytes
import libnum


def CMA(n, e1, e2, c1, c2):
    s = gmpy2.gcdext(e1, e2)
    s1 = s[1]
    s2 = s[2]
    if s1 < 0:
        s1 = -s1
        c1 = gmpy2.invert(c1, n)
    if s2 < 0:
        s2 = -s2
        c2 = gmpy2.invert(c2, n)
    m = pow(c1, s1, n) * pow(c2, s2, n) % n
    return m


def CMA2(n, e1, e2, c1, c2):
    s, s1, s2 = gmpy2.gcdext(e1, e2)
    m = (pow(c1, s1, n) * pow(c2, s2, n)) % n
    return m


n = int('''
118551384105265891143241093249027825785975552077598433349491906297304376014433545146681576312672860392895740874135183252592199074916652958722532441310299368574407429281595875200076325010809218722569831431269164222918750275453537587439380341362035526268555097575973427405577674303858695799268503307304543423063
''')
c1 = int('''
116753531119914702189998091085515603804982822177797634882657879640256939859927348236382130729654062151110736357566214962573821592383741851497033566349080757310118522485134928318404912851656846501838656571530273243817671246806755397617788624067212148734009764625213083816577180905485446541197197725696652742410
''')
c2 = int('''
101789432173086940827318148304924220350912310081074818752138448179662865165901494216292145407356834573752612403409055879217358167304865760311271596169839803911734092110080837804490998553946188023988886261546960169606191495262688174204421558754825485142547673746018349734656483749257460610084980119145152844839
''')
e1 = 3
e2 = 5
for i in range(2**256-65536, 2**256):
    if gmpy2.is_prime(i):
        m = CMA(n, e1, e2, c1, c2-i)
        m = long_to_bytes(m)[:28]
        print(m)
