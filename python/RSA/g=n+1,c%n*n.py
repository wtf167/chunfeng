import os
import libnum
import uuid
import gmpy2

'''
flag = "flag{" + str(uuid.uuid4()) + "}"
m = libnum.s2n(flag.encode() + os.urandom(80))
print(m)
p = libnum.generate_prime(1024)
q = libnum.generate_prime(1024)
n = p * q
g = n + 1
assert(m < n)
hint = gmpy2.powmod(m,n,n*n)
c = (gmpy2.powmod(g,p,n*n) * gmpy2.powmod(m,n,n*n)) % (n*n)
print("c =", c)
print("n =", n)
print("hint =", hint)

n = 16024094478830446976183493384392847060750052546871268934856425313678442868041513679415696215012344744087471106996229731318088726938355473749598986214444813309386707907321553954295551985976751213412855579029931346755886681138661365405703649653392389822703940120550940337189008090795142215540758635110282740207149089430239149930883594303790192198611323054903770847673763422664389193972173342616661353818776615507063255917715778614533190269346952550386862863165073772353407366864171863313733112808994608142591781621298427498401915220442887424300135619507564873725145253237750805626133120121512425488417117086985003011957
hint = 99102088770691600263765330030205693631171996923340016832908358222806609367254840084569975945091048394489830742861050802917323639657885234704231714931661725802309941428934514163883324663138181700364319128714760939021054847956904800476928344990614345043848432827826249546861763978151954454038905173788040149507840306947715384851484337163981247881585630361347935333894356230684963982666035031078650793222028219574366280303506325751235378692318131677027366007357375696333190619362220733097015046713386816432472215281676732638636084626616100294448863395179762917302764885398786147052935128934644657187077281553828521876301983110024428746793399019489377091025430512485180948843092719201285803822031653774964119609718917744105473983088831410070470775239065419287579154714769241639504547497706024936634192989353656137072212871760931277206717024285173048843288360638502560598286336776314557263958806526983790626694757992411976346662318851409852027462334695572509042253384933139964013506793643848973219988318185037801591521660090568076944424625986907329203321709542370971808122560163918454624870375310208303264501622503010043986749286511295553851233905554808676700937521035312493442653605363126656010366869311452536657652785328123583450768923
h1 = gmpy2.invert(hint, n*n)
p = gmpy2.gcd(c*h1-1, n)
q = n // p
assert(p*q == n)
phi = (p-1) * (q-1)
d = gmpy2.invert(n, phi)
m = gmpy2.powmod(hint, d, n)
print(libnum.n2s(int(m)))